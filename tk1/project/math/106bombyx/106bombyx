#!/usr/bin/python3

import sys

def print_man():
    print("USAGE")
    print("\t./106bombyx n [k | i0 i1]")
    print("DESCRIPTION")
    print("\tn:\tnumber of first generation individuals")
    print("\tk:\tgrowth rate from 1 to 4")
    print("\ti1:\tinitial generation (included)")
    print("\ti2:\tfinal generation (included)")
    return 1

def generation_curve(param_n, param_k):
    try:
        n = int(param_n)
        if n < 0:
            return 84
        k = float(param_k)
        if not (k >= 1 and k<=4):
            return 84
    except ValueError:
        return 84

    i = 1
    print(i, "%.2f" % round(n, 2))
    while i < 100:
        i += 1
        n = k * n * ((1000-n)/1000)
        if n < 0:
            n = 0
        print(i, "%.2f" % round(n, 2))
    return 0

def calc_n_at_i(n, k, i1):
    i = 1
    while i < i1:
        i += 1
        n = k * n * ((1000-n)/1000)
        if n < 0:
            n = 0

    return n

def results_sum_k(param_n, param_i1, param_i2):
    try:
        n = int(param_n)
        if n < 0:
            return 84
        i1 = int(param_i1)
        if i1 < 0:
            return 84
        i2 = int(param_i2)
        if i2 < 0:
            return 84
    except ValueError as ex:
        return 84

    k = 1.0
    while k < 4:
        n = calc_n_at_i(n, k, i1)
        i = i1
        while i <= i2:
            i += 1
            n = k * n * ((1000-n)/1000)
            if n < 0:
                n = 0
            print("%.2f" % k, "%.2f" % round(n, 2))
        k += 0.01

    return 0

def main():
    argv = sys.argv
    argc = len(sys.argv)

    if argc == 3:
        retCode = generation_curve(argv[1], argv[2])
    elif argc == 4:
        retCode = results_sum_k(argv[1], argv[2], argv[3])
    elif argc == 2 and argv[1] == "-h":
        retCode = print_man()
    else:
        retCode = 84;

    return retCode

if __name__ == "__main__":
    main()