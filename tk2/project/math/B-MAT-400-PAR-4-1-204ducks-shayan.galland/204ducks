#!/usr/bin/env python3
import sys
import numpy as np

argc = len(sys.argv)
argv = sys.argv

def help():
    if argv[1] == "-h" and argc == 2:
        print("USAGE")
        print("\t./204ducks a")
        print("")
        print("DESCRIPTION")
        print("\ta\tconstant (between 0 and 2.5)")
        exit(0)

def error():
    print("ERROR")
    exit(84)

def f(t, a):
    return (a * np.exp(-t)) + ((4 - 3 * a) * np.exp(-2 * t)) + ((2 * a - 4) * np.exp(-4 * t))

def calculate_results(a):
    dt = 0.0001
    time = np.arange(0, 10, dt)

    probabilities = f(time, a)

    cum_prob = []
    cum_sum = 0
    for prob in probabilities:
        cum_sum += prob * dt
        cum_prob.append(cum_sum)

    avg_time = np.sum(time * probabilities) * dt
    std_dev = np.sqrt(np.sum((time - avg_time)**2 * probabilities) * dt)

    t_50 = time[next(i for i, cum_prob_value in enumerate(cum_prob) if cum_prob_value >= 0.5)]
    t_99 = time[next(i for i, cum_prob_value in enumerate(cum_prob) if cum_prob_value >= 0.99)]

    p_1min = cum_prob[next(i for i, t in enumerate(time) if t >= 1)] * 100
    p_2min = cum_prob[next(i for i, t in enumerate(time) if t >= 2)] * 100

    return avg_time, std_dev, t_50, t_99, p_1min, p_2min


def main():
    help()

    if argc != 2 or not argv[1].replace(".", "").isnumeric():
        error()
    
    a = float(argv[1])
    
    if a < 0 or a > 2.5:
        error()

    avg_time, std_dev, t_50, t_99, p_1min, p_2min = calculate_results(a)

    print(f"Average return time: {int(avg_time)}m {int((avg_time % 1) * 60):02d}s")
    print(f"Standard deviation: {std_dev:.3f}")
    print(f"Time after which 50% of the ducks are back: {int(t_50)}m {int((t_50 % 1) * 60):02d}s")
    print(f"Time after which 99% of the ducks are back: {int(t_99)}m {int((t_99 % 1) * 60):02d}s")
    print(f"Percentage of ducks back after 1 minute: {p_1min:.1f}%")
    print(f"Percentage of ducks back after 2 minutes: {p_2min:.1f}%")

    exit(0)

if __name__ == "__main__":
    main()