#!/usr/bin/python3
import numpy as np
import sys

argc = len(sys.argv)
argv = sys.argv

DEFAULT_END = 5000
DEFAULT_INTERVAL = 10000

def params():
    if argc == 1:
        help()
        exit(84)
    if argc >= 2:
        if argv[1] == "-h":
            help()
            exit(0)
        elif argv[1] == "--help":
            help()
            exit(0)
        try:
                n = int(argv[1])
        except ValueError:
            print("Wrong arguments\ntry :")
            help()
            exit (84)
    if not(n >= 0 and n <= DEFAULT_END):
        print("n has to be positive and less than 5000")
        help()
        exit(84)


def help():
    print("USAGE")
    print("\t./110borwein n")
    print("")
    print("DESCRIPTION")
    print("\tn constant defining the integral to be computed")
    return 1

def prt(res1, res2, n, array):
    print(array)
    print(f"I{n} = {res1:.10f}")
    print(f"diff = {res2:.10f}")
    if array != "Simpson:":
        print("")


def borwein(n, p):
    result = 1.0
    coef = 0
    if p == 0:
        return 1
    while (coef <= n):
        result = result*(np.sin(p/((2*coef)+1))/(p/((2*coef)+1)))
        coef += 1
    return (result)

def midpoint(n):
    result1 = 0
    result = 0
    a = 0
    b = 0.5
    for i in range(DEFAULT_INTERVAL):
        result1 = borwein(n, (a+b)/2)
        result1 *= b-a
        result += result1
        a+=0.5
        b+=0.5
    diff = abs(result-np.pi/2)
    prt(result, diff, n, "Midpoint:")

def trapezoidal(n):
    r1 = 0
    r2 = 0
    tab_n = []
    tab_i = []
    for i in range(1, DEFAULT_INTERVAL):
        r1 = r1+borwein(n, i*0.5)
        r2 = ((r1*2)+borwein(n, 0)+borwein(n, 5000))*1/4
        tab_i.append(i)
        tab_n.append(r2)
    result = ((r1*2)+borwein(n, 0)+borwein(n, 5000))*1/4
    diff = abs(result-np.pi/2)
    prt(result, diff, n, "Trapezoidal:")

def simpson(n):
    r1 = 0
    r2 = 0
    i = 1
    for i in range(1, DEFAULT_INTERVAL):
        r1 = r1+borwein(n, i*0.5)
    for i in range(DEFAULT_INTERVAL):
        r2 = r2+borwein(n, (i*0.5)+0.25)
    result = ((r1*2)+(r2*4)+borwein(n, 0)+borwein(n, 5000))*0.08333333333333333333333333333333
    diff = abs(result-np.pi/2)
    prt(result, diff, n, "Simpson:")


def main():
    params()

    n = int(argv[1])
    midpoint(n)
    trapezoidal(n)
    simpson(n)

if __name__ == "__main__":
	main()
