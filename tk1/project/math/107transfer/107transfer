#!/usr/bin/env python3
import sys

argc = len(sys.argv)
argv = sys.argv

def calc_fx(function, x):
    result = float(function[0])
    count = 1
    len_function = len(function)
    while count != len_function:
        result = float(function[count]) + x * result
        count = count + 1
    return (result)

def div_numerator_denumerator(numerator, denumerator, frequency):
    result = 0
    numerator_x = calc_fx(numerator, frequency)
    denumerator_x = calc_fx(denumerator, frequency)
    if (denumerator_x != 0):
        result = (numerator_x / denumerator_x)
    else :
        result = 0
    return (result)

def calc_fuction_complex(argv, argc):
    frequency = 0
    result = 1
    nbr_function = 1
    while (frequency <= 1000):
        nbr_function = 1
        result = 1
        while (nbr_function != argc):
            numerator = argv[nbr_function][::-1]
            denumerator = argv[nbr_function + 1][::-1]
            numerator = numerator.split("*")
            denumerator = denumerator.split("*")
            for i in range (len(numerator)):
                numerator[i] = numerator[i][::-1]
            for i in range (len(denumerator)):
                denumerator[i] = denumerator[i][::-1]
            result = result * div_numerator_denumerator(numerator, denumerator, frequency / 1000)
            nbr_function = nbr_function + 2
        print("{:.3f} ->"" {:.5f}" .format((frequency / 1000), result))
        frequency = frequency + 1

def calc_fuction_simple(argv):
    frequency = 0
    numerator = argv[1][::-1]
    denumerator = argv[2][::-1]
    numerator = numerator.split("*")
    denumerator = denumerator.split("*")
    for i in range (len(numerator)):
        numerator[i] = numerator[i][::-1]
    for i in range (len(denumerator)):
        denumerator[i] = denumerator[i][::-1]
    numerator_x = 0
    denumerator_x = 0
    numerator_x = 0
    while frequency <= 1000:
        result = div_numerator_denumerator(numerator, denumerator, frequency / 1000)
        print("{:.3f} ->"" {:.5f}" .format((frequency / 1000), result))
        frequency = frequency + 1

def help():
    print("""USAGE
    ./107transfer [numerator den]*

DESCRIPTION
    numerator polynomial numeratorerator defined by its coefficients
    den polynomial denominator defined by its coefficients""")

def incorrect_arguments(argc, argv):
    j: int = 0
    i: int = 1
    len_str: int = 0
    while (i != argc):
        j = 0
        len_str = len(argv[i])
        while (j != len_str):
            if (argv[i][j] != '*' and argv[i][j] != '-') and (argv[i][j] > '9' or argv[i][j] < '0'):
                return (84)
            j = j + 1
        i = i + 1
    return (0)

def error(argc, argv):
    if (argc % 2 == 0 or argc < 3):
        return (84)
    if incorrect_arguments(argc, argv) == 84:
        return (84)
    return (0)

def do_transfer(argc, argv):
    if argc == 3:
        calc_fuction_simple(argv)
    else:
        calc_fuction_complex(argv, argc)

def transfer():
    if argc == 2:
        if argv[1] == "-h":
            help()
            sys.exit(0)
    if error(argc, argv) == 84:
        sys.exit(84)
    do_transfer(argc, argv)
    sys.exit(0)

transfer()