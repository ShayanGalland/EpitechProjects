import System.Environment
import System.Exit
import System.Random
import Data.List
import Data.Char
import Text.Read (readMaybe)
import Data.Maybe (isNothing)
import Data.Ord (comparing)

-------------------------------------------------------------- args parsing --------------------------------------------------------------


data Options = Options { numColors :: Maybe Int, convLimit :: Maybe Double, filePath :: Maybe FilePath} deriving Show

parseArgs :: [String] -> Options -> Either String Options
parseArgs [] options = Right options
parseArgs ("-n":n:xs) options = case readMaybe n of
    Just i -> parseArgs xs (options { numColors = Just i })
    Nothing -> Left "Invalid argument for -n"
parseArgs ("-l":l:xs) options = case readMaybe l of
    Just d -> parseArgs xs (options { convLimit = Just d })
    Nothing -> case readMaybe l of
        Just i -> parseArgs xs (options { convLimit = Just (fromIntegral i) })
        Nothing -> Left "Invalid argument for -l"
parseArgs ("-f":f:xs) options = parseArgs xs (options { filePath = Just f })
parseArgs (_:xs) options = parseArgs xs options


-------------------------------------------------------------- main functions --------------------------------------------------------------


main :: IO ()
main = do
    args <- getArgs
    if length (args) /= 6
        then printUsage >> exitErr
        else do
        if (head args) == "-h" || (head args) == "--help"
            then printUsage >> exitSuccess
            else do
            let options = parseArgs args (Options Nothing Nothing Nothing)
            case parseArgs args (Options Nothing Nothing Nothing) of
                Left errorMsg -> printUsage >> putStrLn errorMsg >> exitErr
                Right options ->
                    if isNothing (numColors options) || isNothing (convLimit options) || isNothing (filePath options)
                        then printUsage >> exitErr
                        else compressImage options

compressImage :: Options -> IO ()
compressImage options = do
    let maybeFilePath = filePath options
    case maybeFilePath of
        Nothing -> exitErr
        Just file -> do
            pixels <- readPixels file
            errFile pixels
            let numColors' = maybe 16 id (numColors options)
            let convLimit' = maybe 0.01 id (convLimit options)
            clustering pixels numColors' convLimit'

clustering :: [[Int]] -> Int -> Double -> IO ()
clustering points k convergenceLimit = do
  let centroids = initializeCentroids points k
  let clusters = kMeans points centroids convergenceLimit
  mapM_ printCluster clusters


-------------------------------------------------------------- clustering algos --------------------------------------------------------------


type Point = (Int, Int, Int)
type Cluster = ([Int], Point)

initializeCentroids :: [[Int]] -> Int -> [Point]
initializeCentroids points k = undefined -- TODO: implement

kMeans :: [[Int]] -> [Point] -> Double -> [Cluster]
kMeans points centroids convergenceLimit = undefined -- TODO: implement

printCluster :: Cluster -> IO ()
printCluster (points, color) = do
  putStrLn "--"
  putStrLn $ showColor color
  putStrLn "-"
  mapM_ (putStrLn . showPoint) points

showColor :: Point -> String
showColor (r, g, b) = "(" ++ show r ++ "," ++ show g ++ "," ++ show b ++ ")"

showPoint :: [Int] -> String
showPoint [x, y, r, g, b] = "(" ++ show x ++ "," ++ show y ++ ") " ++ showColor (r, g, b)

euclideanDistance :: Point -> Point -> Double
euclideanDistance (x1, y1, z1) (x2, y2, z2) = sqrt $ fromIntegral (dx*dx + dy*dy + dz*dz)
  where dx = x1 - x2
        dy = y1 - y2
        dz = z1 - z2


-------------------------------------------------------------- pixels parse --------------------------------------------------------------


parsePixel :: [String] -> [[Int]]
parsePixel [] = []
parsePixel (x:xs) = getDigits x : parsePixel xs

readPixels :: FilePath -> IO [[Int]]
readPixels filePath = do
    contents <- readFile filePath
    let linesOfFile = lines contents
    let pixels = parsePixel linesOfFile
    return pixels

getDigits :: String -> [Int]
getDigits = do
        intList <- map read . filter (all isDigit) . groupBy (\a b -> isDigit a && isDigit b)
        return intList


-------------------------------------------------------------- error gestion --------------------------------------------------------------


checkValues :: [[Int]] -> IO ()
checkValues xs = if all (\ys -> length ys == 5 && all (>=0) (take 2 ys) && all (\z -> z >= 0 && z <= 255) (drop 2 ys)) xs
                 then return ()
                 else exitErr

checkSize :: [[Int]] -> IO ()
checkSize xs = if all (\ys -> length ys == 5) xs
               then return ()
               else exitErr

errFile :: [[Int]] -> IO ()
errFile ([]) = exitErr
errFile xs = do
  checkSize xs
  checkValues xs

exitErr :: IO ()
exitErr = exitWith (ExitFailure 84)


-------------------------------------------------------------- print utils --------------------------------------------------------------


printUsage :: IO ()
printUsage = putStrLn help

help :: String
help = "USAGE: ./imageCompressor -n N -l L -f F\n\
        \\n\
        \\tN\tnumber of colors in the final image\n\
        \\tL\tconvergence limit\n\
        \\tF\tpath to the file containing the colors of the pixels\n"


-------------------------------------------------------------- end --------------------------------------------------------------
