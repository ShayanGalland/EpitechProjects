#!/usr/bin/env python3
import sys
import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import numpy as np
import time
import os
import pygame.font
from pygame import Surface
from OpenGL.GL import glDrawPixels, glWindowPos2d

class Game:
    def __init__(self):
        self.elapsed_time = 0
        self.pause_time = 0
        self.score = 0
        self.high_score = self.load_high_score()
        self.is_paused = False
        self.font = pygame.font.Font(None, 36)
        self.font_color = (100, 255, 30)
        self.last_pause_time = 0

    def load_high_score(self):
        if os.path.exists("high_score.txt"):
            with open("high_score.txt", "r") as file:
                return int(file.read())
        else:
            return 0

    def save_high_score(self, score):
        with open("high_score.txt", "w") as file:
            file.write(str(score))

    def update_high_score(self):
        if self.score > self.high_score:
            self.high_score = self.score
            self.save_high_score(self.score)

    def render_text(self, text, position):
        text_surface = self.font.render(text, True, self.font_color)
        text_data = pygame.image.tostring(text_surface, "RGBA", True)
        width, height = text_surface.get_size()

        glWindowPos2d(*position)
        glDrawPixels(width, height, GL_RGBA, GL_UNSIGNED_BYTE, text_data)


#utils function
def create_sphere(radius, slices, stacks):
    sphere = gluNewQuadric()
    gluQuadricNormals(sphere, GLU_SMOOTH)
    gluQuadricTexture(sphere, GL_TRUE)
    gluQuadricDrawStyle(sphere, GLU_FILL)
    return sphere, radius, slices, stacks

def draw_sphere(sphere_info, position):
    sphere, radius, slices, stacks = sphere_info
    glPushMatrix()
    glTranslate(*position)
    gluSphere(sphere, radius, slices, stacks)
    glPopMatrix()

def random_enemy_position():
    return np.array([np.random.uniform(-8, 8), 0, np.random.uniform(-8, 8)])


# init pygame and window
pygame.init()
pygame.font.init()
width, height = 800, 600
screen = pygame.display.set_mode((width, height), DOUBLEBUF|OPENGL)

# set up OpenGL
glEnable(GL_DEPTH_TEST)
glMatrixMode(GL_PROJECTION)
gluPerspective(45, width / height, 0.1, 100)
glMatrixMode(GL_MODELVIEW)

# camera settings
camera_pos = np.array([0.0, 0.0, -5.0])
camera_front = np.array([0.0, 0.0, 1.0])
camera_up = np.array([0.0, 1.0, 0.0])
camera_speed = 0.1

# mouse settings
pygame.mouse.set_visible(False)
pygame.event.set_grab(True)
sensitivity = 0.1
yaw, pitch = 0, 0

# game settings
projectiles = []
enemies = [random_enemy_position() for _ in range(5)]
last_shot_time = 0
shot_cooldown = 0.25
projectile_speed = 0.5
sphere_info = create_sphere(0.2, 16, 16)
enemy_sphere_info = create_sphere(0.5, 16, 16)

start_time = time.time()

# init game object
game = Game()

running = True
while running:
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
            sys.exit()

    keys = pygame.key.get_pressed()
    if keys[K_ESCAPE]:
        running = False
        sys.exit()

    # pause logic
    if keys[K_SPACE]:
        if time.time() - game.last_pause_time > 0.5:
            if game.is_paused:
                game.is_paused = False
                start_time += time.time() - game.pause_time
            else:
                game.is_paused = True
                game.pause_time = time.time()
            game.last_pause_time = time.time()

    if not game.is_paused:
        # camera rotation
        dx, dy = pygame.mouse.get_rel()
        yaw += dx * sensitivity
        pitch -= dy * sensitivity
        pitch = np.clip(pitch, -89.0, 89.0)

        camera_direction = np.array(
            [
                np.cos(np.radians(yaw)) * np.cos(np.radians(pitch)),
                np.sin(np.radians(pitch)),
                np.sin(np.radians(yaw)) * np.cos(np.radians(pitch)),
            ]
        )
        camera_front = camera_direction / np.linalg.norm(camera_direction)

        # shoot
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                last_shot_time = time.time()
                projectiles.append((camera_pos.copy(), camera_front.copy()))


        # update projectiles
        new_projectiles = []
        for position, direction in projectiles:
            position += direction * projectile_speed
            if np.linalg.norm(position - camera_pos) < 50:
                new_projectiles.append((position, direction))
        projectiles = new_projectiles

        # check collisions
        alive_enemies = []
        for enemy in enemies:
            hit = False
            for projectile_position, _ in projectiles:
                if np.linalg.norm(projectile_position - enemy) < 0.7:
                    hit = True
                    break

            if hit:
                enemy = random_enemy_position()
                game.score += 5
                game.update_high_score()
            alive_enemies.append(enemy)
        enemies = alive_enemies

    # display
    glLoadIdentity()
    gluLookAt(
        *camera_pos,
        *(camera_pos + camera_front),
        *camera_up
    )

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    # draw ground
    glBegin(GL_QUADS)
    glColor3f(0.5, 0.5, 0.5)
    glVertex3f(-10, -1, -10)
    glVertex3f(-10, -1, 10)
    glVertex3f(10, -1, 10)
    glVertex3f(10, -1, -10)
    glEnd()

    # draw projectiles
    glColor3f(1, 0, 0)
    for position, _ in projectiles:
        draw_sphere(sphere_info, position)

    # draw enemies
    glColor3f(0, 0, 1)
    for enemy in enemies:
        draw_sphere(enemy_sphere_info, enemy)


    # passes in 2D
    pygame.display.flip()

    glMatrixMode(GL_PROJECTION)
    glPushMatrix()
    glLoadIdentity()
    glOrtho(0.0, width, height, 0.0, -1.0, 10.0)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()


    # write text on pause
    glDisable(GL_LIGHTING)

    if game.is_paused:
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
        game.render_text(f"Time left: {30 - int(game.elapsed_time)}", (10, 10))
        game.render_text(f"Score: {game.score}", (10, 50))
        game.render_text(f"High score: {game.high_score}", (10, 90))
        glDisable(GL_BLEND)

    # pass in 3D
    glMatrixMode(GL_PROJECTION)
    glPopMatrix()
    glMatrixMode(GL_MODELVIEW)

    pygame.display.flip()

    if not game.is_paused:
        game.elapsed_time = time.time() - start_time

    if game.elapsed_time >= 30:
        running = False

    pygame.time.wait(2)

pygame.quit()